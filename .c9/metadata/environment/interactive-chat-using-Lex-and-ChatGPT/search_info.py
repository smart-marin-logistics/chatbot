{"filter":false,"title":"search_info.py","tooltip":"/interactive-chat-using-Lex-and-ChatGPT/search_info.py","undoManager":{"mark":40,"position":40,"stack":[[{"start":{"row":14,"column":0},"end":{"row":21,"column":69},"action":"insert","lines":["from langchain.chains.question_answering import load_qa_chain","from langchain.chat_models import ChatOpenAI","# 모델초기화","model = ChatOpenAI(model=\"gpt-3.5-turbo\") # gpt-3.5-turbo, gpt-4","# QA체인 로드","qa_chain = load_qa_chain(model, chain_type=\"map_reduce\")","# 문서 분석 체인 초기화","qa_document_chain = AnalyzeDocumentChain(combine_docs_chain=qa_chain)"],"id":1}],[{"start":{"row":13,"column":84},"end":{"row":14,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":22,"column":69},"end":{"row":23,"column":0},"action":"insert","lines":["",""],"id":3}],[{"start":{"row":7,"column":54},"end":{"row":8,"column":0},"action":"insert","lines":["",""],"id":4}],[{"start":{"row":8,"column":0},"end":{"row":9,"column":0},"action":"insert","lines":["from langchain.chains import AnalyzeDocumentChain",""],"id":5}],[{"start":{"row":9,"column":0},"end":{"row":10,"column":0},"action":"insert","lines":["from langchain.chains.summarize import load_summarize_chain",""],"id":6}],[{"start":{"row":48,"column":18},"end":{"row":48,"column":29},"action":"remove","lines":["./pdf_files"],"id":7},{"start":{"row":48,"column":18},"end":{"row":48,"column":67},"action":"insert","lines":["/interactive-chat-using-Lex-and-ChatGPT/pdf_files"]}],[{"start":{"row":61,"column":21},"end":{"row":61,"column":27},"action":"remove","lines":["pdf_db"],"id":8},{"start":{"row":61,"column":21},"end":{"row":61,"column":60},"action":"insert","lines":["/interactive-chat-using-Lex-and-ChatGPT"]}],[{"start":{"row":61,"column":60},"end":{"row":61,"column":61},"action":"insert","lines":["/"],"id":9}],[{"start":{"row":61,"column":61},"end":{"row":61,"column":62},"action":"insert","lines":["ㅔ"],"id":10},{"start":{"row":61,"column":62},"end":{"row":61,"column":63},"action":"insert","lines":["ㅇ"]},{"start":{"row":61,"column":62},"end":{"row":61,"column":63},"action":"remove","lines":["ㅇ"]},{"start":{"row":61,"column":61},"end":{"row":61,"column":62},"action":"remove","lines":["ㅔ"]}],[{"start":{"row":61,"column":61},"end":{"row":61,"column":62},"action":"insert","lines":["P"],"id":11},{"start":{"row":61,"column":62},"end":{"row":61,"column":63},"action":"insert","lines":["d"]},{"start":{"row":61,"column":63},"end":{"row":61,"column":64},"action":"insert","lines":["f"]}],[{"start":{"row":61,"column":63},"end":{"row":61,"column":64},"action":"remove","lines":["f"],"id":12},{"start":{"row":61,"column":62},"end":{"row":61,"column":63},"action":"remove","lines":["d"]},{"start":{"row":61,"column":61},"end":{"row":61,"column":62},"action":"remove","lines":["P"]}],[{"start":{"row":61,"column":61},"end":{"row":61,"column":62},"action":"insert","lines":["p"],"id":13},{"start":{"row":61,"column":62},"end":{"row":61,"column":63},"action":"insert","lines":["d"]},{"start":{"row":61,"column":63},"end":{"row":61,"column":64},"action":"insert","lines":["f"]},{"start":{"row":61,"column":64},"end":{"row":61,"column":65},"action":"insert","lines":["_"]},{"start":{"row":61,"column":65},"end":{"row":61,"column":66},"action":"insert","lines":["d"]},{"start":{"row":61,"column":66},"end":{"row":61,"column":67},"action":"insert","lines":["b"]}],[{"start":{"row":61,"column":21},"end":{"row":61,"column":60},"action":"remove","lines":["/interactive-chat-using-Lex-and-ChatGPT"],"id":14}],[{"start":{"row":61,"column":21},"end":{"row":61,"column":22},"action":"insert","lines":["."],"id":15}],[{"start":{"row":53,"column":58},"end":{"row":53,"column":62},"action":"remove","lines":["1000"],"id":16},{"start":{"row":53,"column":58},"end":{"row":53,"column":59},"action":"insert","lines":["5"]},{"start":{"row":53,"column":59},"end":{"row":53,"column":60},"action":"insert","lines":["0"]},{"start":{"row":53,"column":60},"end":{"row":53,"column":61},"action":"insert","lines":["0"]}],[{"start":{"row":48,"column":18},"end":{"row":48,"column":19},"action":"insert","lines":["/"],"id":17}],[{"start":{"row":48,"column":18},"end":{"row":48,"column":19},"action":"remove","lines":["/"],"id":18}],[{"start":{"row":48,"column":18},"end":{"row":48,"column":19},"action":"insert","lines":["."],"id":19}],[{"start":{"row":10,"column":0},"end":{"row":10,"column":1},"action":"insert","lines":["ㅑ"],"id":20},{"start":{"row":10,"column":1},"end":{"row":10,"column":2},"action":"insert","lines":["ㅡ"]},{"start":{"row":10,"column":1},"end":{"row":10,"column":2},"action":"remove","lines":["ㅡ"]},{"start":{"row":10,"column":0},"end":{"row":10,"column":1},"action":"remove","lines":["ㅑ"]}],[{"start":{"row":10,"column":0},"end":{"row":10,"column":1},"action":"insert","lines":["I"],"id":21}],[{"start":{"row":10,"column":0},"end":{"row":10,"column":1},"action":"remove","lines":["I"],"id":22}],[{"start":{"row":10,"column":0},"end":{"row":10,"column":1},"action":"insert","lines":["i"],"id":23},{"start":{"row":10,"column":1},"end":{"row":10,"column":2},"action":"insert","lines":["m"]},{"start":{"row":10,"column":2},"end":{"row":10,"column":3},"action":"insert","lines":["p"]},{"start":{"row":10,"column":3},"end":{"row":10,"column":4},"action":"insert","lines":["o"]},{"start":{"row":10,"column":4},"end":{"row":10,"column":5},"action":"insert","lines":["r"]},{"start":{"row":10,"column":5},"end":{"row":10,"column":6},"action":"insert","lines":["t"]}],[{"start":{"row":10,"column":6},"end":{"row":10,"column":7},"action":"insert","lines":[" "],"id":24}],[{"start":{"row":10,"column":7},"end":{"row":10,"column":17},"action":"insert","lines":["pdfplumber"],"id":25}],[{"start":{"row":74,"column":0},"end":{"row":75,"column":0},"action":"insert","lines":["",""],"id":26},{"start":{"row":75,"column":0},"end":{"row":76,"column":0},"action":"insert","lines":["",""]},{"start":{"row":76,"column":0},"end":{"row":76,"column":1},"action":"insert","lines":["-"]}],[{"start":{"row":76,"column":0},"end":{"row":76,"column":1},"action":"remove","lines":["-"],"id":27}],[{"start":{"row":76,"column":0},"end":{"row":76,"column":1},"action":"insert","lines":["#"],"id":28},{"start":{"row":76,"column":1},"end":{"row":76,"column":2},"action":"insert","lines":["#"]}],[{"start":{"row":76,"column":2},"end":{"row":76,"column":3},"action":"insert","lines":[" "],"id":29},{"start":{"row":76,"column":3},"end":{"row":76,"column":4},"action":"insert","lines":["c"]},{"start":{"row":76,"column":4},"end":{"row":76,"column":5},"action":"insert","lines":["n"]}],[{"start":{"row":76,"column":4},"end":{"row":76,"column":5},"action":"remove","lines":["n"],"id":30},{"start":{"row":76,"column":3},"end":{"row":76,"column":4},"action":"remove","lines":["c"]}],[{"start":{"row":76,"column":3},"end":{"row":76,"column":4},"action":"insert","lines":["출"],"id":31}],[{"start":{"row":76,"column":4},"end":{"row":76,"column":6},"action":"insert","lines":["력 "],"id":32},{"start":{"row":76,"column":6},"end":{"row":76,"column":7},"action":"insert","lines":["테"]},{"start":{"row":76,"column":7},"end":{"row":76,"column":8},"action":"insert","lines":["스"]}],[{"start":{"row":76,"column":8},"end":{"row":76,"column":10},"action":"insert","lines":["트 "],"id":33},{"start":{"row":76,"column":10},"end":{"row":76,"column":11},"action":"insert","lines":["중"]}],[{"start":{"row":79,"column":12},"end":{"row":79,"column":39},"action":"remove","lines":["pdf_files/재해통계및사례집_2021.pdf"],"id":34},{"start":{"row":79,"column":12},"end":{"row":79,"column":90},"action":"insert","lines":["/interactive-chat-using-Lex-and-ChatGPT/pdf_files/재해통계및사례집_2021.pdf"]}],[{"start":{"row":79,"column":12},"end":{"row":79,"column":13},"action":"insert","lines":["."],"id":35}],[{"start":{"row":76,"column":0},"end":{"row":76,"column":2},"action":"insert","lines":["# "],"id":36},{"start":{"row":77,"column":0},"end":{"row":77,"column":2},"action":"insert","lines":["# "]},{"start":{"row":79,"column":0},"end":{"row":79,"column":2},"action":"insert","lines":["# "]},{"start":{"row":81,"column":0},"end":{"row":81,"column":2},"action":"insert","lines":["# "]},{"start":{"row":82,"column":0},"end":{"row":82,"column":2},"action":"insert","lines":["# "]},{"start":{"row":83,"column":0},"end":{"row":83,"column":2},"action":"insert","lines":["# "]},{"start":{"row":84,"column":0},"end":{"row":84,"column":2},"action":"insert","lines":["# "]},{"start":{"row":85,"column":0},"end":{"row":85,"column":2},"action":"insert","lines":["# "]},{"start":{"row":86,"column":0},"end":{"row":86,"column":2},"action":"insert","lines":["# "]},{"start":{"row":87,"column":0},"end":{"row":87,"column":2},"action":"insert","lines":["# "]},{"start":{"row":88,"column":0},"end":{"row":88,"column":2},"action":"insert","lines":["# "]}],[{"start":{"row":53,"column":58},"end":{"row":53,"column":61},"action":"remove","lines":["500"],"id":37},{"start":{"row":53,"column":58},"end":{"row":53,"column":59},"action":"insert","lines":["1"]},{"start":{"row":53,"column":59},"end":{"row":53,"column":60},"action":"insert","lines":["0"]},{"start":{"row":53,"column":60},"end":{"row":53,"column":61},"action":"insert","lines":["0"]},{"start":{"row":53,"column":61},"end":{"row":53,"column":62},"action":"insert","lines":["0"]}],[{"start":{"row":61,"column":0},"end":{"row":65,"column":40},"action":"remove","lines":["persist_directory = './pdf_db'","vectordb = Chroma.from_documents(","    documents=texts,","    embedding=embedding,","    persist_directory=persist_directory)"],"id":38},{"start":{"row":61,"column":0},"end":{"row":73,"column":0},"action":"insert","lines":["# Chroma 벡터 데이터베이스 생성 또는 로드","persist_directory = './pdf_db'","if not os.path.exists(persist_directory):  # 데이터베이스가 없는 경우에만 생성","    vectordb = Chroma.from_documents(","        documents=texts,","        embedding=embedding,","        persist_directory=persist_directory)","    vectordb.persist()","else:  # 데이터베이스가 이미 존재하는 경우, 로드","    vectordb = Chroma(","        persist_directory=persist_directory,","        embedding_function=embedding)",""]}],[{"start":{"row":20,"column":0},"end":{"row":25,"column":69},"action":"remove","lines":["# 모델초기화","model = ChatOpenAI(model=\"gpt-3.5-turbo\") # gpt-3.5-turbo, gpt-4","# QA체인 로드","qa_chain = load_qa_chain(model, chain_type=\"map_reduce\")","# 문서 분석 체인 초기화","qa_document_chain = AnalyzeDocumentChain(combine_docs_chain=qa_chain)"],"id":39},{"start":{"row":19,"column":44},"end":{"row":20,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":28,"column":0},"end":{"row":76,"column":0},"action":"remove","lines":["def load_pdfs_from_directory(directory, glob_pattern=\"*.pdf\"):","    documents = []","    for filepath in glob.glob(os.path.join(directory, glob_pattern)):","        with open(filepath, 'rb') as file:","            reader = PdfReader(file)","            text = \"\"","            for page_num in range(len(reader.pages)):","                page = reader.pages[page_num]","                text += page.extract_text()","            document = CustomDocument(page_content=text, metadata={\"source\": filepath})","            documents.append(document)","    return documents","","# PDF 파일 로드","directory_path = './interactive-chat-using-Lex-and-ChatGPT/pdf_files'","documents = load_pdfs_from_directory(directory_path)","print(f\"Loaded {len(documents)} documents from the directory.\")","","# 텍스트 분리기 인스턴스 생성","text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)","texts = text_splitter.split_documents(documents)","print(f\"Split into {len(texts)} text chunks.\")","","# OpenAI 임베딩 인스턴스 생성","embedding = OpenAIEmbeddings()","","# Chroma 벡터 데이터베이스 생성","# Chroma 벡터 데이터베이스 생성 또는 로드","persist_directory = './pdf_db'","if not os.path.exists(persist_directory):  # 데이터베이스가 없는 경우에만 생성","    vectordb = Chroma.from_documents(","        documents=texts,","        embedding=embedding,","        persist_directory=persist_directory)","    vectordb.persist()","else:  # 데이터베이스가 이미 존재하는 경우, 로드","    vectordb = Chroma(","        persist_directory=persist_directory,","        embedding_function=embedding)","","","vectordb.persist()","vectordb = None","","# 벡터 데이터베이스 로드","vectordb = Chroma(","    persist_directory=persist_directory,","    embedding_function=embedding)",""],"id":40},{"start":{"row":28,"column":0},"end":{"row":67,"column":0},"action":"insert","lines":["# ... 기존 라이브러리 및 모듈 임포트 ...","","def load_pdfs_from_directory(directory, glob_pattern=\"*.pdf\"):","    documents = []","    for filepath in glob.glob(os.path.join(directory, glob_pattern)):","        with open(filepath, 'rb') as file:","            reader = PdfReader(file)","            text = \"\"","            for page_num in range(len(reader.pages)):","                page = reader.pages[page_num]","                text += page.extract_text()","            document = CustomDocument(page_content=text, metadata={\"source\": filepath})","            documents.append(document)","    return documents","","# PDF 파일 로드","directory_path = './interactive-chat-using-Lex-and-ChatGPT/pdf_files'","documents = load_pdfs_from_directory(directory_path)","","# 텍스트 분리기 인스턴스 생성","text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)","texts = text_splitter.split_documents(documents)","","# OpenAI 임베딩 인스턴스 생성","embedding = OpenAIEmbeddings()","","# Chroma 벡터 데이터베이스 생성 또는 로드","persist_directory = './pdf_db'","database_file_path = os.path.join(persist_directory, 'chroma.db') ","","# 데이터베이스가 없을 경우에만 생성","if not os.path.exists(database_file_path):","    vectordb = Chroma.from_documents(","        documents=texts,","        embedding=embedding,","        persist_directory=persist_directory)","    vectordb.persist()","","print(\"Data processing and embedding finished.\")",""]}],[{"start":{"row":0,"column":0},"end":{"row":82,"column":0},"action":"remove","lines":["# 필요한 라이브러리 및 모듈을 가져옵니다.","from langchain.vectorstores import Chroma","from langchain.embeddings import OpenAIEmbeddings","from langchain.text_splitter import RecursiveCharacterTextSplitter","from langchain.llms import OpenAI","from langchain.chains import RetrievalQA","from langchain.document_loaders import TextLoader","from langchain.document_loaders import DirectoryLoader","from langchain.chains import AnalyzeDocumentChain","from langchain.chains.summarize import load_summarize_chain","import pdfplumber","import os","import glob","from PyPDF2 import PdfReader","","# OpenAI API 키 설정","os.environ[\"OPENAI_API_KEY\"] = \"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\"","","from langchain.chains.question_answering import load_qa_chain","from langchain.chat_models import ChatOpenAI","","# 사용자 정의 문서 클래스","class CustomDocument:","    def __init__(self, page_content, metadata):","        self.page_content = page_content","        self.metadata = metadata","","# 지정된 디렉터리에서 PDF 파일을 로드하는 함수","# ... 기존 라이브러리 및 모듈 임포트 ...","","def load_pdfs_from_directory(directory, glob_pattern=\"*.pdf\"):","    documents = []","    for filepath in glob.glob(os.path.join(directory, glob_pattern)):","        with open(filepath, 'rb') as file:","            reader = PdfReader(file)","            text = \"\"","            for page_num in range(len(reader.pages)):","                page = reader.pages[page_num]","                text += page.extract_text()","            document = CustomDocument(page_content=text, metadata={\"source\": filepath})","            documents.append(document)","    return documents","","# PDF 파일 로드","directory_path = './interactive-chat-using-Lex-and-ChatGPT/pdf_files'","documents = load_pdfs_from_directory(directory_path)","","# 텍스트 분리기 인스턴스 생성","text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)","texts = text_splitter.split_documents(documents)","","# OpenAI 임베딩 인스턴스 생성","embedding = OpenAIEmbeddings()","","# Chroma 벡터 데이터베이스 생성 또는 로드","persist_directory = './pdf_db'","database_file_path = os.path.join(persist_directory, 'chroma.db') ","","# 데이터베이스가 없을 경우에만 생성","if not os.path.exists(database_file_path):","    vectordb = Chroma.from_documents(","        documents=texts,","        embedding=embedding,","        persist_directory=persist_directory)","    vectordb.persist()","","print(\"Data processing and embedding finished.\")","","","# ## 출력 테스트 중    ","# import pdfplumber","","# pdf_path = \"./interactive-chat-using-Lex-and-ChatGPT/pdf_files/재해통계및사례집_2021.pdf\"","","# # pdfplumber를 사용하여 PDF 파일 열기","# with pdfplumber.open(pdf_path) as pdf:","#     raw_text = \"\"","#     for page in pdf.pages:","#         text = page.extract_text()","#         if text:","#             raw_text += text","# print(raw_text[:1000])",""],"id":41},{"start":{"row":0,"column":0},"end":{"row":90,"column":0},"action":"insert","lines":["from langchain.vectorstores import Chroma","from langchain.embeddings import OpenAIEmbeddings","from langchain.text_splitter import RecursiveCharacterTextSplitter","from langchain.llms import OpenAI","from langchain.chains import RetrievalQA","from langchain.document_loaders import TextLoader","from langchain.document_loaders import DirectoryLoader","from langchain.chains import AnalyzeDocumentChain","from langchain.chains.summarize import load_summarize_chain","import pdfplumber","import os","import glob","from PyPDF2 import PdfReader","","# OpenAI API 키 설정","os.environ[\"OPENAI_API_KEY\"] = \"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\"","","from langchain.chains.question_answering import load_qa_chain","from langchain.chat_models import ChatOpenAI","","# 사용자 정의 문서 클래스","class CustomDocument:","    def __init__(self, page_content, metadata):","        self.page_content = page_content","        self.metadata = metadata","","# 지정된 디렉터리에서 PDF 파일을 로드하는 함수","def load_pdfs_from_directory(directory, glob_pattern=\"*.pdf\"):","    documents = []","    for filepath in glob.glob(os.path.join(directory, glob_pattern)):","        with open(filepath, 'rb') as file:","            reader = PdfReader(file)","            text = \"\"","            for page_num in range(len(reader.pages)):","                page = reader.pages[page_num]","                text += page.extract_text()","            document = CustomDocument(page_content=text, metadata={\"source\": filepath})","            documents.append(document)","    return documents","","# PDF 파일 로드","directory_path = './interactive-chat-using-Lex-and-ChatGPT/pdf_files'","documents = load_pdfs_from_directory(directory_path)","print(f\"Loaded {len(documents)} documents from the directory.\")","","# 텍스트 분리기 인스턴스 생성","text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)","texts = text_splitter.split_documents(documents)","print(f\"Split into {len(texts)} text chunks.\")","","# OpenAI 임베딩 인스턴스 생성","embedding = OpenAIEmbeddings()","","# Chroma 벡터 데이터베이스 생성","# Chroma 벡터 데이터베이스 생성 또는 로드","persist_directory = './pdf_db'","if not os.path.exists(persist_directory):  # 데이터베이스가 없는 경우에만 �������성","    vectordb = Chroma.from_documents(","        documents=texts,","        embedding=embedding,","        persist_directory=persist_directory)","    vectordb.persist()","else:  # 데이터베이스가 이미 존재하는 경우, 로드","    vectordb = Chroma(","        persist_directory=persist_directory,","        embedding_function=embedding)","","","vectordb.persist()","vectordb = None","","# 벡터 데이터베이스 로드","vectordb = Chroma(","    persist_directory=persist_directory,","    embedding_function=embedding)","","","# ## 출력 테스트 중    ","# import pdfplumber","","# pdf_path = \"./interactive-chat-using-Lex-and-ChatGPT/pdf_files/재해통계및사례집_2021.pdf\"","","# # pdfplumber를 사용하여 PDF 파일 열기","# with pdfplumber.open(pdf_path) as pdf:","#     raw_text = \"\"","#     for page in pdf.pages:","#         text = page.extract_text()","#         if text:","#             raw_text += text","# print(raw_text[:1000])",""]}]]},"ace":{"folds":[],"scrolltop":65.9141845703125,"scrollleft":0,"selection":{"start":{"row":88,"column":30},"end":{"row":88,"column":30},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":29,"state":"start","mode":"ace/mode/python"}},"timestamp":1692345546633,"hash":"0bbc641000cc5db04f76be1b8c4ba971241293ba"}